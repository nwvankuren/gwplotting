}
# Modify the chromosome ordering column with a number for each chromosome
scaf_order <- tibble( scaf = rle( chr_input$scaf )$values ,
num = as.numeric(seq( 1:length(unique( chr_input$scaf )))))
chr_input$chr <- scaf_order$num[ match( input$scaf, scaf_order$scaf ) ] %>%
select( -tmp_chr )
return(chr_input)
}
x
reorder_by_chromosome(x)
reorder_by_chromosome <- function( input, exclude = T ){
# this will be unhappy because it doesn't want to convert the unmapped
# scaffold names to numeric. Don't forget Z, W, or M!
input <- input %>%
mutate( tmp_chr = as.numeric(str_remove( scaf, 'chr' )))
sex_chrs <- filter( input, scaf %in% c('chrZ','chrW'))
chr_input <- filter( input, !is.na(tmp_chr))
chr_input <- chr_input[ order( chr_input$tmp_chr,
chr_input$ps), ]
chr_input <- bind_rows( chr_input, sex_chrs )
if( !exclude){
nonchr_input <- filter( input, is.na(tmp_chr) &
! scaf %in% c('chrZ','chrW'))
chr_input <- bind_rows( chr_input, nonchr_input )
}
chr_input <-  select( chr_input, -tmp_chr )
# Modify the chromosome ordering column with a number for each chromosome
scaf_order <- tibble( scaf = rle( chr_input$scaf )$values ,
num = as.numeric(seq( 1:length(unique( chr_input$scaf )))))
chr_input$chr <- scaf_order$num[ match( input$scaf, scaf_order$scaf ) ]
return(chr_input)
}
reorder_by_chromosome(x)
reorder_by_chromosome <- function( input, exclude = T ){
# this will be unhappy because it doesn't want to convert the unmapped
# scaffold names to numeric. Don't forget Z, W, or M!
input <- input %>%
mutate( tmp_chr = as.numeric(str_remove( scaf, 'chr' )))
sex_chrs <- filter( input, scaf %in% c('chrZ','chrW'))
chr_input <- filter( input, !is.na(tmp_chr))
chr_input <- chr_input[ order( chr_input$tmp_chr,
chr_input$ps), ]
chr_input <- bind_rows( chr_input, sex_chrs )
if( !exclude){
nonchr_input <- filter( input, is.na(tmp_chr) &
! scaf %in% c('chrZ','chrW'))
chr_input <- bind_rows( chr_input, nonchr_input )
}
# Modify the chromosome ordering column with a number for each chromosome
scaf_order <- tibble( scaf = rle( chr_input$scaf )$values ,
num = as.numeric(seq( 1:length(unique( chr_input$scaf )))))
chr_input$chr <- scaf_order$num[ match( input$scaf, scaf_order$scaf ) ]
return(chr_input)
}
x
reorder_by_chromosome(x)
reorder_by_chromosome <- function( input, exclude = T ){
# this will be unhappy because it doesn't want to convert the unmapped
# scaffold names to numeric. Don't forget Z, W, or M!
input <- input %>%
mutate( tmp_chr = as.numeric(str_remove( scaf, 'chr' )))
sex_chrs <- filter( input, scaf %in% c('chrZ','chrW'))
chr_input <- filter( input, !is.na(tmp_chr))
chr_input <- chr_input[ order( chr_input$tmp_chr,
chr_input$ps), ]
chr_input <- bind_rows( chr_input, sex_chrs )
if( !exclude){
nonchr_input <- filter( input, is.na(tmp_chr) &
! scaf %in% c('chrZ','chrW'))
chr_input <- bind_rows( chr_input, nonchr_input )
}
# Modify the chromosome ordering column with a number for each chromosome
scaf_order <- tibble( scaf = rle( chr_input$scaf )$values ,
num = as.numeric(seq( 1:length(unique( chr_input$scaf )))))
chr_input$chr <- scaf_order$num[ match( chr_input$scaf, scaf_order$scaf ) ]
return(chr_input)
}
reorder_by_chromosome(x)
x
reorder_by_chromosome <- function( input, exclude = T ){
# this will be unhappy because it doesn't want to convert the unmapped
# scaffold names to numeric. Don't forget Z, W, or M!
suppressWarnings(input <- input %>%
mutate( tmp_chr = as.numeric(str_remove( scaf, 'chr' ))))
sex_chrs <- filter( input, scaf %in% c('chrZ','chrW'))
chr_input <- filter( input, !is.na(tmp_chr))
chr_input <- chr_input[ order( chr_input$tmp_chr,
chr_input$ps), ]
chr_input <- bind_rows( chr_input, sex_chrs )
if( !exclude){
nonchr_input <- filter( input, is.na(tmp_chr) &
! scaf %in% c('chrZ','chrW'))
chr_input <- bind_rows( chr_input, nonchr_input )
}
chr_input <- select( chr_input, -tmp_chr )
# Modify the chromosome ordering column with a number for each chromosome
scaf_order <- tibble( scaf = rle( chr_input$scaf )$values ,
num = as.numeric(seq( 1:length(unique( chr_input$scaf )))))
chr_input$chr <- scaf_order$num[ match( chr_input$scaf, scaf_order$scaf ) ]
return(chr_input)
}
x
reorder_by_chromosome(x)
tail(x)
reorder_by_chromosome(x, exclude = F)
reorder_by_chromosome(x, exclude = F) -> y
y
tail(y)
reorder_by_chromosome(x, exclude = T) -> y
tail(y)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/reordering_functions.R", echo=TRUE)
gwas <- '~/Dropbox/gwas_2024/results/plow.mim.filtered_gwas.assoc.txt.gz'
scaf_lens <- '~/Dropbox/gwas_2024/info/low_mim_ragtag.genome'
gff3 <- '~/Dropbox/gwas_2024/info/low_mim_ragtag.paplowMliftoff.gff3'
z <- get_cumulative_positions( y, scaf_lens,
buffer = 100000, after = 'chromosomes' )
z
get_cumulative_positions <- function( input, scaffold_lengths, buffer = 0,
after = 'scaffolds' ){
if( after == "scaffolds" ){
after <- 'scaf_num'
} else if( after == "chromosomes" ){
after <- 'chr'
} else {
stop("\"after\" must be set to either scaffolds or chromosomes")
}
# Each subsequent scaffold gets the cumulative length of previous scaffolds
# added to each position. Have to make totLens separately because you can't
# put an order(match()) command in a pipe.
# Get lengths of each scaffold, then get cumulative positions
tot_lens <- readr::read_table( scaffold_lengths, col_names = F ) %>%
mutate( X1 = str_remove(X1, '_RagTag'))
colnames( tot_lens ) <- c( 'scaf', 'length' )
tot_lens <- dplyr::mutate( tot_lens,
scaf = stringr::str_replace( scaf, "[|]size[:digit:]*$", "") )
# Get order of scaffolds in the input file
scaf_order <- tibble::tibble( scaf = rle( input$scaf )$values ,
num = as.numeric( seq(1:length( unique( input$scaf )))))
# For keeping order in input
input$scaf_num <- scaf_order$num[ match( input$scaf, scaf_order$scaf ) ]
tot_lens <- dplyr::filter( tot_lens, tot_lens$scaf %in% scaf_order$scaf )
tot_lens <- tot_lens[ match( scaf_order$scaf, tot_lens$scaf ), ]
# Actually shift the positions
input <- tot_lens %>%
# Get cumulative chromosome sizes
dplyr::mutate( cum_sum = cumsum( length ) - length ) %>%
# Add the matching running total to a new column in gwas
dplyr::left_join( input, . , by = c("scaf" = "scaf")) %>%
# Add a new column of ps + cumSum + a buffer
dplyr::mutate( bp_cum = ps + cum_sum + buffer * (chr - 1 ))
input <- dplyr::select( input, -cum_sum, -length )
return( input )
}
#' Generate reordering information for a VCF file
#'
#' This function will produce two files that you can use in conjunction with
#' PLINK to reorder your VCF according to chromosome assignments.
#'
#' @param vcf The name of the VCF file that you want to reorder.
#' @param scaffold_lengths Draft genome scaffold lengths.
#' @param assignments Name of the file containing the reordering information.
#' @param species The abbreviation for the species assembly you ordered to.
#' @param out Prefix of the files to write to.
#'
#' @return Nothing. Produces two files: out.exclude.txt and out.reordering.txt for
#'     use with PLINK and your original VCF file.
#' @export
#'
#' @examples
generate_reordering_for_vcf <- function( vcf, scaffold_lengths, assignments,
species, out ){
# Prepare output filenames
for_exclude <- paste0( out, '.exclude.txt' )
for_reorder <- paste0( out, '.reordering.txt' )
# Read in only the first three columns.
x <- read_table2( file = vcf, comment = "#", col_names = F,
col_types = cols_only( X1 = 'c', X2 = 'i', X3 = 'c'))
# Make consistent with helper functions
colnames(x) <- c('scaf','ps','stat')
x$chr <- 1
# need bp_cum for each chromosome, not as a whole. Assign to chromosomes.
y <- reorder_scaffolds( x, assignments = assignments, species = species ) %>%
select( scaf, ps, stat, chr )
# Get SNPs excluded after reordering
setdiff( x$stat, y$stat ) -> excluded
write.table( x= excluded, file = for_exclude, quote = F, col.names = F,
row.names = F )
rm(excluded)
rm(x)
# Get cumulative positions per chr
chrs <- unique( y$chr )
for( i in chrs ){
z <- y %>% filter( chr == i ) %>%
get_cumulative_positions( ., scaffold_lengths = scaffold_lengths ) %>%
select( stat, chr, bp_cum )
write_delim( x = z, path = for_reorder, delim = " ", append = T,
col_names = F )
message("Finished ",i," \n")
}
message("Finished. Apply reordering information to your VCF using the",
"following\nPLINK command:\n\nplink --vcf ", vcf, "--exclude ",
for_exclude, " --allow-extra-chr --allow-no-sex --make-bed ",
"--update-chr ", for_reorder, " 2 1 --update-map ", for_reorder,
" 3 1 \n\nYou can then recode as VCF using PLINK, if needed.")
}
z <- get_cumulative_positions( y, scaf_lens,
buffer = 100000, after = 'chromosomes' )
z
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
mxs
-log10(0)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
z
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
z %>% group_by(chr)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
z
axisdf <- z %>% dplyr::group_by( chr ) %>%
dplyr::summarize( center = ( max(bp_cum) + min(bp_cum) ) / 2 )
axisdf
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
chr <- 'chr17'
from_pos <- 5300000
to_pos <- 5700000
plot_region_data( z, chromosome = chr, from = from_pos, to = to_pos )
plot_region_data( z, scaffold = chr, from = from_pos, to = to_pos )
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_region_data( z, scaffold = chr, from = from_pos, to = to_pos )
z
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_region_data( z, chr = chr, from = from_pos, to = to_pos )
chr <- 17
plot_region_data( z, chr = chr, from = from_pos, to = to_pos )
z
z %>% filter( chr == 17)
z %>% filter( scaf == 17 )
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_region_data( z, chr = chr, from = from_pos, to = to_pos )
z
plot_region_data( z, chromosome = chr, from = from_pos, to = to_pos )
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_region_data( z, chromosome = chr, from = from_pos, to = to_pos )
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
plot_region_data( z, chromosome = chr, from = from_pos, to = to_pos )
x <- load_gemma_gwas(gwas,
pval = 'p_lrt')
y <- reorder_by_chromosome(x)
z <- get_cumulative_positions( y, scaf_lens,
buffer = 100000, after = 'chromosomes' )
plot_genomewide_data( z, type = 'gwas', scaf_lens, plotting_column = 'stat', col1 = 'black',
'gray')
# Chromosome must be in z. "scaffold" matches the scaf column, "chromosome"
# matches the chr column.
scaf <- 'chr17'
chr <- 17
from_pos <- 5400000
to_pos <- 5800000
plot_region_data( z, chromosome = chr, from = from_pos, to = to_pos )
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == scaf, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
z %>% filter( scaf == scaf)
z
z %>% filter( scaf eq scaf )
# Chromosome must be in z. "scaffold" matches the scaf column, "chromosome"
# matches the chr column.
scaf <- "chr17"
z %>% filter( scaf eq scaf )
z %>% filter( scaf == scaf)
z %>% filter( str_equal(scaf, scaf) )
# Chromosome must be in z. "scaffold" matches the scaf column, "chromosome"
# matches the chr column.
target <- "chr17"
z %>% filter( scaf == target)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
z %>% filter( scaf == target, ps >= from_pos, ps <= to_pos)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
z %>% filter( scaf == target, ps >= from_pos, ps <= to_pos)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
z %>% filter( scaf == target, ps >= from_pos, ps <= to_pos)
read_table( gff3, comment = "#", col_names = c('chrom','source','type','start','end',
'score','strand','phase','attributes'))
read_table( gff3, comment = "#", col_names = c('chrom','source','type','start','end',
'score','strand','phase','attributes')) -> genes
tail(genes)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
scaf_strands <- cbind('scaf' = 'chr17', 'strand' = '+')
scaf_strands
scaf_strands$strand
scaf_strands[,2]
scaf_strands$"strand"
str(scaf_strands)
as.data.frame(scaf_strands)
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
gene_modesl
gene_models
source("~/Library/CloudStorage/Dropbox/analyses/papilio_alphenor_functional_genomics/spatial_transcriptomics/spatial_test_2024-05/gwplotting/R/plotting_functions.R", echo=TRUE)
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
gene_models
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
geom_rect( inherit.aes = F,
data = scafs,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
expand_limits( y = c(-10, 100) ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
expand_limits( y = c(-20, 100) ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
gene_models
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = 0,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
expand_limits( y = c(-20, 100) ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
?annotate
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -10,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
gene_models <- add_annotations(z %>% filter( scaf == target, ps >= from_pos,
ps <= to_pos), ymin = -6,
ymax = 0, scaffold_lengths = scaf_lens,
gff = gff3, feature = 'gene', mapping = "chr")
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
alpha = 0.5,
size = 0.25 )
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
fill = 'blue'
alpha = 0.5,
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
fill = 'blue',
alpha = 0.5,
size = 0.25 )
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
fill = 'blue',
alpha = 1,
size = 0.25 )
gene_modles
gene_models
# Color a particular gene model
gene_colors = rep('gray',nrow(gene_models))
gene_colors
gene_colors[ gene_models$ids %in% c('dsx','sir2','pros') ] <- 'red'
plot_region_data(z, chromosome = chr, from = from_pos, to = to_pos ) +
ylim( -10, 100 ) +
geom_rect( inherit.aes = F,
data = gene_models,
mapping = aes( xmin = xmins,
xmax = xmaxs,
ymin = ymins,
ymax = ymaxs),
color = 'black',
fill = gene_colors,
alpha = 1,
size = 0.25 )
install.packages('gitcreds')
gitcreds::gitcreds_set()
library(tidyverse)
